#ifndef LIGHT_COMPONENT_HPP
#define LIGHT_COMPONENT_HPP

#include <glm/glm.hpp>
LightComponent.hpp :

#include <variant>

namespace Nova::Components {

    struct LightComponent {

        enum class LightType {
            Directional = 0,                        //sun
            Point = 1,                              //standalone light bulb
            Spot = 2                                //flashlight
        };

        LightType m_Type = LightType::Directional;;
        glm::vec3 m_Color = { 1.0f, 1.0f, 1.0f };
        float     m_Intensity = 1.0f;

        struct DirectionLight {
            glm::vec3 m_Direction = { -0.5f, -1.0f, -0.3f };
        };

        struct SpotLight {
            glm::vec3 m_Direction = { -0.5f, -1.0f, -0.3f };
            float m_Range = 10.0f;
            float m_InnerCone = glm::radians(12.5f); // angle in radians
            float m_OuterCone = glm::radians(17.5f); // angle in radians
        };

        struct PointLight {
            float m_Range = 10.0f;
        };

        std::variant<DirectionLight, PointLight, SpotLight> m_Params = DirectionLight{};

        // helpers
        const DirectionLight* asDirectional()   const { return std::get_if<DirectionLight>(&m_Params); }
        const PointLight* asPoint()             const { return std::get_if<PointLight>(&m_Params); }
        const SpotLight* asSpot()               const { return std::get_if<SpotLight>(&m_Params); }

    };

} // namespace Nova::Components

#endif // LIGHT_COMPONENT_HPP